{"version":3,"sources":["pages/WelcomePage.jsx","common/router/routes.js","common/stores/RootStore.js","common/firebase.js","common/stores/QuestionStore.js","common/stores/QuestionsStore.js","common/stores/AdminStore.js","common/components/Question.jsx","pages/QuestionsPage.jsx","pages/AdminPage.jsx","App.js","App.styles.js","serviceWorker.js","common/router/history.js","index.js"],"names":["WelcomePage","observer","React","Component","routes","name","pattern","beforeEnter","from","to","routerStore","prompt","Promise","reject","RouterState","resolve","notFound","RootStore","this","RouterStore","questionsStore","QuestionsStore","Firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","QuestionState","QuestionStore","action","bound","_dbUnsubscriber","_db","step","userId","answer","localStorage","getItem","firestore","collection","where","limit","onSnapshot","snapshot","size","questionRef","docs","ref","question","data","votes","resetAnswer","questionState","console","log","removeItem","output","total","yes","no","Object","keys","reduce","acc","uid","vote","observable","computed","runTransaction","transaction","get","then","doc","update","setItem","rootStore","auth","signInAnonymously","runInAction","user","isAuthenticated","stepsObj","questionStep","err","AdminStore","_stepRef","exists","stepObj","increment","FieldValue","decrement","buttonsTheme","createMuiTheme","palette","primary","green","secondary","red","Question","inject","i","viewStore","props","init","prevProps","dispose","innerComponent","classes","castVote","votesCount","yesPercentage","noPercentage","Container","theme","Fab","variant","color","aria-label","className","margin","disabled","onClick","e","Done","extendedIcon","Close","Card","card","CardHeader","title","CardContent","Typography","toFixed","LinearProgress","value","withStyles","spacing","fab","selected","marginRight","marginTop","QuestionsPage","CircularProgress","AdminPage","next","previous","component","subheader","CardActions","Button","startIcon","ArrowBack","endIcon","ArrowForward","viewMap","home","questions","admin","App","root","AppBar","position","Toolbar","Link","style","fontFamily","fontSize","textShadow","textDecoration","href","fixed","Grid","container","justify","alignContent","flexGrow","menuButton","Boolean","window","location","hostname","match","history","createBrowserHistory","HistoryAdapter","observeRouterStateChanges","main","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d02b63a9.chunk.js","sourcesContent":["import React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\n@observer\r\nclass WelcomePage extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                Welcome\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WelcomePage;","import { RouterState } from \"mobx-state-router\";\r\n\r\nexport const routes = [\r\n    {\r\n        name: 'home',\r\n        pattern: '/'\r\n    },\r\n    {\r\n        name: 'questions',\r\n        pattern: '/questions'\r\n    },\r\n    {\r\n        name: 'admin',\r\n        pattern: '/admin',\r\n        beforeEnter: (from, to, routerStore) => {\r\n            let password = prompt(\"Enter password\");\r\n\r\n            if (password !== \"xyc\") {\r\n                return Promise.reject(new RouterState('home'));\r\n            }\r\n\r\n            return Promise.resolve();\r\n        }\r\n    }\r\n]","// import { observable, runInAction } from 'mobx';\r\nimport { RouterState, RouterStore } from 'mobx-state-router';\r\n\r\nimport { routes } from '../router/routes';\r\nimport { QuestionsStore } from './';\r\n\r\nconst notFound = new RouterState('notFound');\r\n\r\nclass RootStore {\r\n    constructor() {\r\n        this.routerStore = new RouterStore(this, routes, notFound);\r\n\r\n        this.questionsStore = new QuestionsStore(this);\r\n    }\r\n}\r\n\r\nexport default RootStore;","import Firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBjqj1Ge9e3lgX1q3MeZCm8UzjQLa9qCwI\",\r\n    authDomain: \"voter-ccc7c.firebaseapp.com\",\r\n    databaseURL: \"https://voter-ccc7c.firebaseio.com\",\r\n    projectId: \"voter-ccc7c\",\r\n    storageBucket: \"voter-ccc7c.appspot.com\",\r\n    messagingSenderId: \"112218268129\",\r\n    appId: \"1:112218268129:web:26e0a5cc6531ca010ef2a0\",\r\n    measurementId: \"G-G0TSSSZ1GL\"\r\n};\r\n\r\nFirebase.initializeApp(firebaseConfig);\r\n\r\nexport default Firebase;","import { observable, action, computed } from 'mobx';\r\nimport Firebase from '../firebase';\r\n\r\nconst QuestionState = {\r\n    INIT: 0,\r\n    DISPLAY: 1,\r\n    END: 2\r\n}\r\n\r\nclass QuestionStore {\r\n    @observable questionState = QuestionState.INIT;\r\n    @observable question;\r\n    @observable questionRef;\r\n    @observable step;\r\n    @observable answer;\r\n\r\n    @computed get votesCount() {\r\n        let output = {\r\n            total: 0,\r\n            yes: 0,\r\n            no: 0\r\n        };\r\n        if (!this.question) {\r\n            return output;\r\n        }\r\n        return Object.keys(this.question.votes).reduce((acc, uid) => {\r\n            const vote = this.question.votes[uid];\r\n            acc.total++;\r\n\r\n            if (vote === 'yes') {\r\n                acc.yes++;\r\n            }\r\n            else if (vote === 'no') {\r\n                acc.no++;\r\n            }\r\n\r\n            return acc;\r\n        }, output);\r\n    }\r\n\r\n    _dbUnsubscriber;\r\n    _db;\r\n\r\n    @action.bound\r\n    castVote = (vote, userId) => {\r\n        if (this.answer !== vote) {\r\n            Firebase.firestore().runTransaction((transaction) => {\r\n                return transaction.get(this.questionRef).then(doc => {\r\n                    // votes is a map\r\n                    const votes = doc.data()['votes'];\r\n\r\n                    votes[userId] = vote;\r\n\r\n                    transaction.update(this.questionRef, { votes });\r\n                    this.answer = vote;\r\n                    localStorage.setItem(this.step, vote);\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    init(step, userId) {\r\n        this.step = step;\r\n        this.userId = userId;\r\n\r\n        this.answer = localStorage.getItem(this.step);\r\n\r\n        this._dbUnsubscriber = Firebase.firestore().collection('questions')\r\n            .where('sortOrder', '==', step)\r\n            .limit(1)\r\n            .onSnapshot(snapshot => {\r\n                if (snapshot.size === 1) {\r\n                    this.questionRef = snapshot.docs[0].ref;\r\n\r\n                    const question = snapshot.docs[0].data()\r\n                    this.question = question;\r\n\r\n                    if (!question.votes[userId]) {\r\n                        this.resetAnswer();\r\n                    }\r\n\r\n                    this.questionState = QuestionState.DISPLAY;\r\n                }\r\n                else {\r\n                    this.questionState = QuestionState.END;\r\n                    this.question = null;\r\n                }\r\n            });\r\n    }\r\n\r\n    @action.bound\r\n    dispose() {\r\n        if (this._dbUnsubscriber) {\r\n            this._dbUnsubscriber();\r\n            this._dbUnsubscriber = null;\r\n            console.log(\"disposed\");\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    resetAnswer() {\r\n        this.answer = null;\r\n        localStorage.removeItem(this.step);\r\n    }\r\n}\r\n\r\nexport default QuestionStore;","import { observable, action, runInAction } from 'mobx';\r\n\r\nimport Firebase from '../firebase';\r\n\r\nclass QuestionsStore {\r\n    @observable step = 0;\r\n    @observable isAuthenticated = false;\r\n    @observable userId;\r\n\r\n    constructor(rootStore) {\r\n\r\n    }\r\n\r\n    @action.bound\r\n    async init() {\r\n        const auth = await Firebase.auth().signInAnonymously();\r\n\r\n        runInAction(() => {\r\n            this.userId = auth.user.uid;\r\n            this.isAuthenticated = true;\r\n        });\r\n\r\n        const stepsId = \"k1UWLoF47u9t7jVu36aR\";\r\n        Firebase.firestore().collection('steps')\r\n            .doc(stepsId)\r\n            .onSnapshot(doc => {\r\n                const stepsObj = doc.data();\r\n                this.step = stepsObj.questionStep;\r\n            }, err => {\r\n                console.log(\"ERROR\", err);\r\n            });\r\n    }\r\n}\r\n\r\nexport default QuestionsStore;","import { observable, action, runInAction } from 'mobx';\r\nimport Firebase from '../firebase';\r\n\r\nconst stepId = \"k1UWLoF47u9t7jVu36aR\";\r\n\r\nclass AdminStore {\r\n    @observable step = 0;\r\n\r\n    _db = Firebase.firestore();\r\n    _stepRef;\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    @action.bound\r\n    async init() {\r\n        this._stepRef = this._db.collection('steps').doc(stepId);\r\n\r\n        let step = await this._stepRef.get();\r\n        if (step.exists) {\r\n            runInAction(() => {\r\n                const stepObj = step.data();\r\n                this.step = stepObj.questionStep;\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    @action.bound\r\n    async next() {\r\n        const increment = Firebase.firestore.FieldValue.increment(1);\r\n\r\n        await this._stepRef.update({ questionStep: increment });\r\n\r\n        this.step++;\r\n    }\r\n\r\n    @action.bound\r\n    async previous() {\r\n        if (this.step > 0) {\r\n            const decrement = Firebase.firestore.FieldValue.increment(-1);\r\n            await this._stepRef.update({ questionStep: decrement });\r\n            this.step--;\r\n        }\r\n    }\r\n}\r\n\r\nexport default AdminStore;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { inject, observer } from 'mobx-react';\r\n\r\nimport {\r\n    Fab,\r\n    withStyles,\r\n    LinearProgress,\r\n    Container,\r\n    Card,\r\n    CardHeader,\r\n    CardContent,\r\n    Typography,\r\n    createMuiTheme,\r\n    MuiThemeProvider\r\n} from '@material-ui/core';\r\nimport { Done, Close } from '@material-ui/icons';\r\nimport { green, red } from '@material-ui/core/colors';\r\n\r\nimport { QuestionStore } from '../stores';\r\n\r\nconst buttonsTheme = createMuiTheme({\r\n    palette: {\r\n        primary: green,\r\n        secondary: red\r\n    }\r\n});\r\n\r\nconst styles = theme => ({\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    fab: {\r\n        selected: {\r\n            color: \"green\"\r\n        },\r\n    },\r\n    extendedIcon: {\r\n        marginRight: theme.spacing(2)\r\n    },\r\n    card: {\r\n        marginTop: theme.spacing(2)\r\n    }\r\n});\r\n\r\n@inject(i => ({ viewStore: new QuestionStore() }))\r\n@observer\r\nclass Question extends React.Component {\r\n    componentDidMount() {\r\n        const { step, viewStore, userId } = this.props;\r\n\r\n        viewStore.init(step, userId);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const { step, viewStore, userId } = this.props;\r\n\r\n        // re-init only on new step\r\n        if (prevProps.step !== step) {\r\n            viewStore.dispose();\r\n            viewStore.init(step, userId);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.viewStore.dispose();\r\n    }\r\n\r\n    render() {\r\n        const { classes, viewStore, userId } = this.props\r\n        const { question, questionState, castVote, answer, votesCount } = viewStore;\r\n\r\n        let innerComponent;\r\n        if (questionState < 1) {\r\n            innerComponent = (\r\n                <div>\r\n                    Loading...\r\n                </div>\r\n            );\r\n        }\r\n        else if (questionState > 1) {\r\n            innerComponent = (\r\n                <div>\r\n                    The end.\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            // const totalVotes = question.yes + question.no;\r\n            const yesPercentage = ((votesCount.yes / votesCount.total) * 100) || 0;\r\n            const noPercentage = ((votesCount.no / votesCount.total) * 100) || 0;\r\n\r\n            innerComponent = (\r\n                <Container>\r\n                    <h3>{question.question}</h3>\r\n                    <MuiThemeProvider theme={buttonsTheme}>\r\n                        <Fab\r\n                            variant=\"extended\"\r\n                            size=\"large\"\r\n                            color=\"primary\"\r\n                            aria-label=\"Yes\"\r\n                            className={classes.margin}\r\n                            disabled={answer === 'no'}\r\n                            onClick={e => castVote('yes', userId)}\r\n                        >\r\n                            <Done className={classes.extendedIcon} /> Yes\r\n                        </Fab>\r\n                        <Fab\r\n                            variant=\"extended\"\r\n                            size=\"large\"\r\n                            color=\"secondary\"\r\n                            aria-label=\"Yes\"\r\n                            className={classes.margin}\r\n                            disabled={answer === 'yes'}\r\n                            onClick={e => castVote('no', userId)}\r\n                        >\r\n                            <Close className={classes.extendedIcon} /> No\r\n                    </Fab>\r\n                        <div>\r\n                            <Card className={classes.card}>\r\n                                <CardHeader title=\"Results\"></CardHeader>\r\n                                <CardContent>\r\n                                    <Typography>\r\n                                        Yes ({yesPercentage.toFixed(0)} %)\r\n                                </Typography>\r\n                                    <LinearProgress color=\"primary\" variant=\"determinate\" value={yesPercentage} />\r\n                                    <Typography>\r\n                                        No ({noPercentage.toFixed(0)} %)\r\n                                </Typography>\r\n                                    <LinearProgress color=\"secondary\" variant=\"determinate\" value={noPercentage} />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </div>\r\n                    </MuiThemeProvider>\r\n                </Container>\r\n            );\r\n        }\r\n\r\n        return innerComponent;\r\n    }\r\n}\r\n\r\nQuestion.propTypes = {\r\n    step: PropTypes.number.isRequired,\r\n    userId: PropTypes.string.isRequired\r\n}\r\n\r\nexport default withStyles(styles)(Question);","import React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport { Question } from '../common/components';\r\n\r\n@inject(i => {\r\n    const viewStore = i.rootStore.questionsStore;\r\n    return {\r\n        viewStore: viewStore\r\n    }\r\n})\r\n@observer\r\nclass QuestionsPage extends React.Component {\r\n    async componentDidMount() {\r\n        await this.props.viewStore.init();\r\n    }\r\n    render() {\r\n        const { step, isAuthenticated, userId } = this.props.viewStore;\r\n\r\n        if (!isAuthenticated) {\r\n            return (\r\n                <div>\r\n                    <CircularProgress />\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <Question step={step} userId={userId} />\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuestionsPage;","import React from 'react';\r\nimport { observer, inject } from 'mobx-react';\r\nimport { Container, Typography, Card, CardHeader, CardContent, CardActions, Button } from '@material-ui/core';\r\nimport { ArrowBack, ArrowForward } from '@material-ui/icons';\r\n\r\nimport { AdminStore } from '../common/stores';\r\n\r\n@inject(i => {\r\n    const viewStore = new AdminStore();\r\n\r\n    return {\r\n        viewStore\r\n    };\r\n})\r\n@observer\r\nclass AdminPage extends React.Component {\r\n    async componentDidMount() {\r\n        await this.props.viewStore.init();\r\n    }\r\n    render() {\r\n        const { viewStore } = this.props;\r\n        const { step, next, previous } = viewStore;\r\n        return (\r\n            <Container>\r\n                <Typography variant=\"h5\" component=\"h3\">\r\n                    Admin page\r\n                </Typography>\r\n                <Card>\r\n                    <CardHeader title=\"Step\" subheader=\"Use this to change question\" />\r\n                    <CardContent>\r\n                        Current question: {step}\r\n                    </CardContent>\r\n                    <CardActions>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"default\"\r\n                            startIcon={<ArrowBack />}\r\n                            disabled={step < 1}\r\n                            onClick={e => previous()}\r\n                        >\r\n                            Previous question\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"default\"\r\n                            endIcon={<ArrowForward />}\r\n                            onClick={e => next()}\r\n                        >\r\n                            Next question\r\n                        </Button>\r\n                    </CardActions>\r\n                </Card>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AdminPage;","import React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { RouterView } from 'mobx-state-router';\n\nimport { AppBar, Toolbar, Typography, withStyles, Link, Container, Grid } from '@material-ui/core';\n\nimport { appStyles } from './App.styles';\n\nimport { WelcomePage, QuestionsPage, AdminPage } from './pages';\n\nconst viewMap = {\n  home: <WelcomePage />,\n  questions: <QuestionsPage />,\n  admin: <AdminPage />\n};\n\n@inject(i => ({\n  routerStore: i.rootStore.routerStore\n}))\n@observer\nclass App extends React.Component {\n  render() {\n    const classes = this.props.classes;\n\n    return (\n      <div className={classes.root}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography variant=\"h6\" className={classes.title}>\n              <Link style={{ fontFamily: 'Monoton', fontSize: '30px', textShadow: \"2px 2px #ccc\", textDecoration: 'none' }} href=\"/\" color=\"inherit\">Voter</Link>\n            </Typography>\n            <Link href=\"/questions\" color=\"inherit\">Quiz</Link>\n          </Toolbar>\n        </AppBar>\n        <Container fixed>\n          <Grid\n            container\n            justify=\"center\"\n            alignContent=\"center\"\n          >\n            <RouterView routerStore={this.props.routerStore} viewMap={viewMap} />\n          </Grid>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(appStyles)(App);","export const appStyles = theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    }\r\n});","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createBrowserHistory } from 'history';\r\n\r\nexport const history = createBrowserHistory();","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'mobx-react';\nimport { HistoryAdapter } from 'mobx-state-router';\n\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core';\n\nimport { RootStore } from './common/stores';\nimport { history } from './common/router/history';\n\nconst rootStore = new RootStore();\nconst historyAdapter = new HistoryAdapter(rootStore.routerStore, history)\nhistoryAdapter.observeRouterStateChanges();\n\nconst theme = createMuiTheme({\n    fontFamily: 'Roboto, sans-serif',\n    palette: {\n        primary: {\n            main: '#DC3912',\n        },\n        secondary: {\n            main: '#FF9900'\n        },\n    }\n});\n\nReactDOM.render(\n    <MuiThemeProvider theme={theme}>\n        <Provider rootStore={rootStore}>\n            <App />\n        </Provider>\n    </MuiThemeProvider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}