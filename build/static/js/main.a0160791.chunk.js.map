{"version":3,"sources":["pages/WelcomePage.jsx","common/router/routes.js","common/stores/RootStore.js","common/firebase.js","common/stores/QuestionStore.js","common/stores/QuestionsStore.js","common/components/Question.jsx","pages/QuestionsPage.jsx","App.js","App.styles.js","serviceWorker.js","common/router/history.js","index.js"],"names":["WelcomePage","observer","React","Component","routes","name","pattern","notFound","RouterState","RootStore","this","routerStore","RouterStore","questionsStore","QuestionsStore","Firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","QuestionState","QuestionStore","action","bound","_dbUnsubscriber","_db","castVote","vote","_submitVote","prop","firestore","runTransaction","transaction","get","questionRef","then","doc","newVote","data","update","step","collection","where","limit","onSnapshot","snapshot","size","docs","ref","question","questionState","console","log","observable","rootStore","stepsObj","questionStep","Question","inject","i","viewStore","props","init","prevProps","dispose","innerComponent","classes","totalVotes","yes","no","yesPercentage","noPercentage","Container","Fab","variant","color","aria-label","className","margin","onClick","e","Done","extendedIcon","Close","Card","card","CardHeader","title","CardContent","Typography","toFixed","LinearProgress","value","withStyles","theme","spacing","marginRight","marginTop","QuestionsPage","viewMap","home","questions","App","root","AppBar","position","Toolbar","Link","href","fixed","Grid","container","justify","alignContent","xs","flexGrow","menuButton","Boolean","window","location","hostname","match","history","createBrowserHistory","HistoryAdapter","observeRouterStateChanges","createMuiTheme","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a0160791.chunk.js","sourcesContent":["import React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\n@observer\r\nclass WelcomePage extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                Welcome\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WelcomePage;","export const routes = [\r\n    {\r\n        name: 'home',\r\n        pattern: '/'\r\n    },\r\n    {\r\n        name: 'questions',\r\n        pattern: '/questions'\r\n    }\r\n]","// import { observable, runInAction } from 'mobx';\r\nimport { RouterState, RouterStore } from 'mobx-state-router';\r\n\r\nimport { routes } from '../router/routes';\r\nimport { QuestionsStore } from './';\r\n\r\nconst notFound = new RouterState('notFound');\r\n\r\nclass RootStore {\r\n    constructor() {\r\n        this.routerStore = new RouterStore(this, routes, notFound);\r\n\r\n        this.questionsStore = new QuestionsStore(this);\r\n    }\r\n}\r\n\r\nexport default RootStore;","import Firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBjqj1Ge9e3lgX1q3MeZCm8UzjQLa9qCwI\",\r\n    authDomain: \"voter-ccc7c.firebaseapp.com\",\r\n    databaseURL: \"https://voter-ccc7c.firebaseio.com\",\r\n    projectId: \"voter-ccc7c\",\r\n    storageBucket: \"voter-ccc7c.appspot.com\",\r\n    messagingSenderId: \"112218268129\",\r\n    appId: \"1:112218268129:web:26e0a5cc6531ca010ef2a0\",\r\n    measurementId: \"G-G0TSSSZ1GL\"\r\n};\r\n\r\nFirebase.initializeApp(firebaseConfig);\r\n\r\nexport default Firebase;","import { observable, action } from 'mobx';\r\nimport Firebase from '../firebase';\r\n\r\nconst QuestionState = {\r\n    INIT: 0,\r\n    DISPLAY: 1,\r\n    END: 2\r\n}\r\n\r\nclass QuestionStore {\r\n    @observable questionState = QuestionState.INIT;\r\n    @observable question;\r\n    @observable questionRef;\r\n    @observable step;\r\n\r\n    _dbUnsubscriber;\r\n    _db;\r\n\r\n    castVote = (vote) => {\r\n        if (vote === 'yes') {\r\n            this._submitVote('yes');\r\n        }\r\n        else {\r\n            this._submitVote('no');\r\n        }\r\n    }\r\n\r\n    _submitVote = (prop) => {\r\n        Firebase.firestore().runTransaction((transaction) => {\r\n            return transaction.get(this.questionRef).then(doc => {\r\n                const newVote = doc.data()[prop] + 1;\r\n\r\n                transaction.update(this.questionRef, { [prop]: newVote });\r\n            });\r\n        });\r\n    }\r\n\r\n    @action.bound\r\n    init(step) {\r\n        this.step = step;\r\n\r\n        this._dbUnsubscriber = Firebase.firestore().collection('questions')\r\n            .where('step', '==', step)\r\n            .limit(1)\r\n            .onSnapshot(snapshot => {\r\n                if (snapshot.size === 1) {\r\n                    this.questionRef = snapshot.docs[0].ref;\r\n\r\n                    const question = snapshot.docs[0].data()\r\n                    this.question = question;\r\n                    this.questionState = QuestionState.DISPLAY;\r\n                }\r\n                else {\r\n                    this.questionState = QuestionState.END;\r\n                    this.question = null;\r\n                }\r\n            });\r\n    }\r\n\r\n    @action.bound\r\n    dispose() {\r\n        if (this._dbUnsubscriber) {\r\n            this._dbUnsubscriber();\r\n            this._dbUnsubscriber = null;\r\n            console.log(\"disposed\");\r\n        }\r\n    }\r\n}\r\n\r\nexport default QuestionStore;","import { observable, action, runInAction } from 'mobx';\r\n\r\nimport Firebase from '../firebase';\r\n\r\nclass QuestionsStore {\r\n    @observable step = 0;\r\n\r\n    constructor(rootStore) {\r\n        const db = Firebase.firestore();\r\n        const stepsId = \"k1UWLoF47u9t7jVu36aR\";\r\n\r\n        db.collection('steps')\r\n            .doc(stepsId)\r\n            .onSnapshot(doc => {\r\n                const stepsObj = doc.data();\r\n                this.step = stepsObj.questionStep;\r\n            });\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default QuestionsStore;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { inject, observer } from 'mobx-react';\r\n\r\nimport { Fab, withStyles, LinearProgress, Container, Card, CardHeader, CardContent, Typography } from '@material-ui/core';\r\nimport { Done, Close } from '@material-ui/icons';\r\n\r\nimport { QuestionStore } from '../stores';\r\n\r\n@inject(i => ({ viewStore: new QuestionStore() }))\r\n@observer\r\nclass Question extends React.Component {\r\n    componentDidMount() {\r\n        const { step, viewStore } = this.props;\r\n\r\n        viewStore.init(step);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const { step, viewStore } = this.props;\r\n\r\n        // re-init only on new step\r\n        if (prevProps.step !== step) {\r\n            viewStore.dispose();\r\n            viewStore.init(step);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.viewStore.dispose();\r\n    }\r\n\r\n    render() {\r\n        const { classes, viewStore } = this.props\r\n        const { question, questionState, castVote } = viewStore;\r\n\r\n        let innerComponent;\r\n        if (questionState < 1) {\r\n            innerComponent = (\r\n                <div>\r\n                    Loading...\r\n                </div>\r\n            );\r\n        }\r\n        else if (questionState > 1) {\r\n            innerComponent = (\r\n                <div>\r\n                    The end.\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            const totalVotes = question.yes + question.no;\r\n            const yesPercentage = ((question.yes / totalVotes) * 100) || 0;\r\n            const noPercentage = ((question.no / totalVotes) * 100) || 0;\r\n\r\n            innerComponent = (\r\n                <Container>\r\n                    <h3>{question.question}</h3>\r\n                    <Fab\r\n                        variant=\"extended\"\r\n                        size=\"large\"\r\n                        color=\"primary\"\r\n                        aria-label=\"Yes\"\r\n                        className={classes.margin}\r\n                        onClick={e => castVote('yes')}\r\n                    >\r\n                        <Done className={classes.extendedIcon} /> Yes\r\n                    </Fab>\r\n                    <Fab\r\n                        variant=\"extended\"\r\n                        size=\"large\"\r\n                        color=\"secondary\"\r\n                        aria-label=\"Yes\"\r\n                        className={classes.margin}\r\n                        onClick={e => castVote('no')}\r\n                    >\r\n                        <Close className={classes.extendedIcon} /> No\r\n                    </Fab>\r\n                    <div>\r\n                        <Card className={classes.card}>\r\n                            <CardHeader title=\"Results\"></CardHeader>\r\n                            <CardContent>\r\n                                <Typography>\r\n                                    Yes ({yesPercentage.toFixed(0)} %)\r\n                                </Typography>\r\n                                <LinearProgress color=\"primary\" variant=\"determinate\" value={yesPercentage} />\r\n                                <Typography>\r\n                                    No ({noPercentage.toFixed(0)} %)\r\n                                </Typography>\r\n                                <LinearProgress color=\"secondary\" variant=\"determinate\" value={noPercentage} />\r\n                            </CardContent>\r\n                        </Card>\r\n                    </div>\r\n                </Container>\r\n            );\r\n        }\r\n\r\n        return innerComponent;\r\n    }\r\n}\r\n\r\nQuestion.propTypes = {\r\n    step: PropTypes.number.isRequired\r\n}\r\n\r\nconst styles = theme => ({\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    extendedIcon: {\r\n        marginRight: theme.spacing(2)\r\n    },\r\n    card: {\r\n        marginTop: theme.spacing(2)\r\n    }\r\n});\r\n\r\nexport default withStyles(styles)(Question);","import React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Question } from '../common/components';\r\n\r\n@inject(i => {\r\n    const viewStore = i.rootStore.questionsStore;\r\n    return {\r\n        viewStore: viewStore\r\n    }\r\n})\r\n@observer\r\nclass QuestionsPage extends React.Component {\r\n    render() {\r\n        const { step } = this.props.viewStore;\r\n\r\n        return (\r\n            <Question step={step} />\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuestionsPage;","import React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { RouterView } from 'mobx-state-router';\n\nimport { AppBar, Toolbar, Typography, withStyles, Link, Container, Grid } from '@material-ui/core';\n\nimport { appStyles } from './App.styles';\nimport { defaultTemplate } from './common/hoc';\n\nimport { WelcomePage, QuestionsPage } from './pages';\n\n// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nconst viewMap = {\n  home: <WelcomePage />,\n  questions: <QuestionsPage />,\n};\n\n@inject(i => ({\n  routerStore: i.rootStore.routerStore\n}))\n@observer\nclass App extends React.Component {\n  render() {\n    const classes = this.props.classes;\n\n    return (\n      <div className={classes.root}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography variant=\"h6\" className={classes.title}>\n              <Link href=\"/\" color=\"inherit\">Voter</Link>\n            </Typography>\n            <Link href=\"/questions\" color=\"inherit\">Quiz</Link>\n          </Toolbar>\n        </AppBar>\n        <Container fixed>\n          <Grid\n            container\n            justify=\"center\"\n            alignContent=\"center\"\n            xs={12}\n          >\n            <RouterView routerStore={this.props.routerStore} viewMap={viewMap} />\n          </Grid>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(appStyles)(App);","export const appStyles = theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    }\r\n});","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createBrowserHistory } from 'history';\r\n\r\nexport const history = createBrowserHistory();","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'mobx-react';\nimport { HistoryAdapter } from 'mobx-state-router';\n\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core';\n\nimport { RootStore } from './common/stores';\nimport { history } from './common/router/history';\n\nconst rootStore = new RootStore();\nconst historyAdapter = new HistoryAdapter(rootStore.routerStore, history)\nhistoryAdapter.observeRouterStateChanges();\n\nconst theme = createMuiTheme();\n\nReactDOM.render(\n    <MuiThemeProvider theme={theme}>\n        <Provider rootStore={rootStore}>\n            <App />\n        </Provider>\n    </MuiThemeProvider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}