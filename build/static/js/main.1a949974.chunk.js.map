{"version":3,"sources":["pages/WelcomePage.jsx","common/router/routes.js","common/stores/RootStore.js","common/firebase.js","common/stores/QuestionStore.js","common/stores/QuestionsStore.js","common/stores/AdminStore.js","common/components/Question.jsx","pages/QuestionsPage.jsx","pages/AdminPage.jsx","App.js","App.styles.js","serviceWorker.js","common/router/history.js","index.js"],"names":["WelcomePage","observer","React","Component","routes","name","pattern","beforeEnter","from","to","routerStore","prompt","Promise","reject","RouterState","resolve","notFound","RootStore","this","RouterStore","questionsStore","QuestionsStore","Firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","QuestionState","QuestionStore","action","bound","_dbUnsubscriber","_db","step","userId","answer","localStorage","getItem","firestore","collection","where","limit","onSnapshot","snapshot","size","questionRef","docs","ref","question","data","votes","resetAnswer","questionState","console","log","removeItem","output","total","yes","no","Object","keys","reduce","acc","uid","vote","observable","computed","runTransaction","transaction","get","then","doc","update","setItem","rootStore","auth","signInAnonymously","runInAction","user","isAuthenticated","stepsObj","questionStep","err","defaultForm","sortOrder","AdminStore","_stepRef","addQuestion","questionObj","a","newItemRef","set","fetchQuestions","questions","orderBy","result","forEach","push","stepObj","setStep","increment","FieldValue","newStep","fetchQuestion","decrement","event","target","value","form","preventDefault","buttonsTheme","createMuiTheme","palette","primary","green","secondary","red","Question","inject","i","viewStore","props","init","prevProps","dispose","innerComponent","classes","castVote","votesCount","yesPercentage","noPercentage","Container","theme","Fab","variant","color","aria-label","className","margin","disabled","onClick","e","Done","extendedIcon","Close","Card","card","CardHeader","title","CardContent","Typography","toFixed","LinearProgress","withStyles","spacing","fab","selected","marginRight","marginTop","QuestionsPage","CircularProgress","AdminPage","next","displayStep","previous","updateField","submit","component","subheader","CardActions","Button","startIcon","ArrowBack","endIcon","ArrowForward","List","map","q","idx","ListItem","key","ListItemIcon","Visibility","ListItemText","onSubmit","noValidate","autoComplete","TextField","required","label","onChange","type","inputProps","min","viewMap","home","admin","App","root","AppBar","position","Toolbar","Link","style","fontFamily","fontSize","textShadow","textDecoration","href","fixed","Grid","container","justify","alignContent","flexGrow","menuButton","Boolean","window","location","hostname","match","history","createBrowserHistory","HistoryAdapter","observeRouterStateChanges","main","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1a949974.chunk.js","sourcesContent":["import React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\n@observer\r\nclass WelcomePage extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                Welcome\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WelcomePage;","import { RouterState } from \"mobx-state-router\";\r\n\r\nexport const routes = [\r\n    {\r\n        name: 'home',\r\n        pattern: '/'\r\n    },\r\n    {\r\n        name: 'questions',\r\n        pattern: '/questions'\r\n    },\r\n    {\r\n        name: 'admin',\r\n        pattern: '/admin',\r\n        beforeEnter: (from, to, routerStore) => {\r\n            let password = prompt(\"Enter password\");\r\n\r\n            if (password !== \"xyc\") {\r\n                return Promise.reject(new RouterState('home'));\r\n            }\r\n\r\n            return Promise.resolve();\r\n        }\r\n    }\r\n]","// import { observable, runInAction } from 'mobx';\r\nimport { RouterState, RouterStore } from 'mobx-state-router';\r\n\r\nimport { routes } from '../router/routes';\r\nimport { QuestionsStore } from './';\r\n\r\nconst notFound = new RouterState('notFound');\r\n\r\nclass RootStore {\r\n    constructor() {\r\n        this.routerStore = new RouterStore(this, routes, notFound);\r\n\r\n        this.questionsStore = new QuestionsStore(this);\r\n    }\r\n}\r\n\r\nexport default RootStore;","import Firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBjqj1Ge9e3lgX1q3MeZCm8UzjQLa9qCwI\",\r\n    authDomain: \"voter-ccc7c.firebaseapp.com\",\r\n    databaseURL: \"https://voter-ccc7c.firebaseio.com\",\r\n    projectId: \"voter-ccc7c\",\r\n    storageBucket: \"voter-ccc7c.appspot.com\",\r\n    messagingSenderId: \"112218268129\",\r\n    appId: \"1:112218268129:web:26e0a5cc6531ca010ef2a0\",\r\n    measurementId: \"G-G0TSSSZ1GL\"\r\n};\r\n\r\nFirebase.initializeApp(firebaseConfig);\r\n\r\nexport default Firebase;","import { observable, action, computed } from 'mobx';\r\nimport Firebase from '../firebase';\r\n\r\nconst QuestionState = {\r\n    INIT: 0,\r\n    DISPLAY: 1,\r\n    END: 2\r\n}\r\n\r\nclass QuestionStore {\r\n    @observable questionState = QuestionState.INIT;\r\n    @observable question;\r\n    @observable questionRef;\r\n    @observable step;\r\n    @observable answer;\r\n\r\n    @computed get votesCount() {\r\n        let output = {\r\n            total: 0,\r\n            yes: 0,\r\n            no: 0\r\n        };\r\n        if (!this.question) {\r\n            return output;\r\n        }\r\n        return Object.keys(this.question.votes).reduce((acc, uid) => {\r\n            const vote = this.question.votes[uid];\r\n            acc.total++;\r\n\r\n            if (vote === 'yes') {\r\n                acc.yes++;\r\n            }\r\n            else if (vote === 'no') {\r\n                acc.no++;\r\n            }\r\n\r\n            return acc;\r\n        }, output);\r\n    }\r\n\r\n    _dbUnsubscriber;\r\n    _db;\r\n\r\n    @action.bound\r\n    castVote = (vote, userId) => {\r\n        if (this.answer !== vote) {\r\n            Firebase.firestore().runTransaction((transaction) => {\r\n                return transaction.get(this.questionRef).then(doc => {\r\n                    // votes is a map\r\n                    const votes = doc.data()['votes'];\r\n\r\n                    votes[userId] = vote;\r\n\r\n                    transaction.update(this.questionRef, { votes });\r\n                    this.answer = vote;\r\n                    localStorage.setItem(this.step, vote);\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    init(step, userId) {\r\n        this.step = step;\r\n        this.userId = userId;\r\n\r\n        this.answer = localStorage.getItem(this.step);\r\n\r\n        this._dbUnsubscriber = Firebase.firestore().collection('questions')\r\n            .where('sortOrder', '==', step)\r\n            .limit(1)\r\n            .onSnapshot(snapshot => {\r\n                if (snapshot.size === 1) {\r\n                    this.questionRef = snapshot.docs[0].ref;\r\n\r\n                    const question = snapshot.docs[0].data()\r\n                    this.question = question;\r\n\r\n                    if (!question.votes[userId]) {\r\n                        this.resetAnswer();\r\n                    }\r\n\r\n                    this.questionState = QuestionState.DISPLAY;\r\n                }\r\n                else {\r\n                    this.questionState = QuestionState.END;\r\n                    this.question = null;\r\n                }\r\n            });\r\n    }\r\n\r\n    @action.bound\r\n    dispose() {\r\n        if (this._dbUnsubscriber) {\r\n            this._dbUnsubscriber();\r\n            this._dbUnsubscriber = null;\r\n            console.log(\"disposed\");\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    resetAnswer() {\r\n        this.answer = null;\r\n        localStorage.removeItem(this.step);\r\n    }\r\n}\r\n\r\nexport default QuestionStore;","import { observable, action, runInAction } from 'mobx';\r\n\r\nimport Firebase from '../firebase';\r\n\r\nclass QuestionsStore {\r\n    @observable step = 0;\r\n    @observable isAuthenticated = false;\r\n    @observable userId;\r\n\r\n    constructor(rootStore) {\r\n\r\n    }\r\n\r\n    @action.bound\r\n    async init() {\r\n        const auth = await Firebase.auth().signInAnonymously();\r\n\r\n        runInAction(() => {\r\n            this.userId = auth.user.uid;\r\n            this.isAuthenticated = true;\r\n        });\r\n\r\n        const stepsId = \"k1UWLoF47u9t7jVu36aR\";\r\n        Firebase.firestore().collection('steps')\r\n            .doc(stepsId)\r\n            .onSnapshot(doc => {\r\n                const stepsObj = doc.data();\r\n                this.step = stepsObj.questionStep;\r\n            }, err => {\r\n                console.log(\"ERROR\", err);\r\n            });\r\n    }\r\n}\r\n\r\nexport default QuestionsStore;","import { observable, action, computed, runInAction } from 'mobx';\r\nimport Firebase from '../firebase';\r\n\r\nconst stepId = \"k1UWLoF47u9t7jVu36aR\";\r\n\r\nconst defaultForm = {\r\n    question: '',\r\n    sortOrder: 0\r\n}\r\n\r\nclass AdminStore {\r\n    @observable step = 0;\r\n    @observable questions = [];\r\n\r\n    @observable form = defaultForm;\r\n\r\n    _db = Firebase.firestore();\r\n    _stepRef;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    @computed get displayStep() {\r\n        return this.step + 1;\r\n    }\r\n\r\n    @action.bound\r\n    async init() {\r\n        const auth = await Firebase.auth().signInAnonymously();\r\n\r\n        this._stepRef = this._db.collection('steps').doc(stepId);\r\n\r\n        this._stepRef.onSnapshot(doc => {\r\n            const stepObj = doc.data();\r\n\r\n            runInAction(() => {\r\n                this.setStep(stepObj.questionStep);\r\n            });\r\n        });\r\n\r\n        await this.fetchQuestions();\r\n    }\r\n\r\n    @action.bound\r\n    setQuestion(question) {\r\n        this.question = question;\r\n    }\r\n\r\n    @action.bound\r\n    setStep(step) {\r\n        this.step = step;\r\n    }\r\n\r\n    @action.bound\r\n    async next() {\r\n        const increment = Firebase.firestore.FieldValue.increment(1);\r\n\r\n        let newStep = this.step;\r\n        try {\r\n            await this._stepRef.update({ questionStep: increment });\r\n            newStep++;\r\n\r\n            const question = await this.fetchQuestion(newStep);\r\n\r\n            runInAction(() => {\r\n                this.step = newStep;\r\n                this.question = question;\r\n            });\r\n        }\r\n        catch (e) {\r\n\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    async previous() {\r\n        if (this.step > 0) {\r\n            const decrement = Firebase.firestore.FieldValue.increment(-1);\r\n\r\n            let newStep = this.step;\r\n            try {\r\n                await this._stepRef.update({ questionStep: decrement });\r\n                newStep--;\r\n\r\n                const question = await this.fetchQuestion(newStep);\r\n\r\n                runInAction(() => {\r\n                    this.step = newStep;\r\n                    this.question = question;\r\n                });\r\n            }\r\n            catch (e) {\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    // FORM\r\n    @action.bound\r\n    updateField(event) {\r\n        const { name, value } = event.target;\r\n\r\n        this.form[name] = value;\r\n    }\r\n\r\n    @action.bound\r\n    async submit(event) {\r\n        event.preventDefault();\r\n\r\n        await this.addQuestion(this.form);\r\n\r\n        runInAction(async () => {\r\n            this.form = defaultForm;\r\n            await this.fetchQuestions();\r\n        });\r\n\r\n    }\r\n\r\n    addQuestion = async (questionObj) => {\r\n        // this generates new document\r\n        const newItemRef = await Firebase.firestore().collection('questions').doc();\r\n\r\n        // set new data\r\n        await newItemRef.set({\r\n            question: questionObj.question,\r\n            sortOrder: +questionObj.sortOrder,\r\n            votes: {}\r\n        })\r\n    }\r\n\r\n    fetchQuestions = async () => {\r\n        this.questions = [];\r\n        const result = await Firebase.firestore().collection('questions')\r\n            .orderBy('sortOrder', 'asc')\r\n            .get();\r\n\r\n        runInAction(() => {\r\n            result.forEach(doc => {\r\n                this.questions.push(doc.data());\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport default AdminStore;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { inject, observer } from 'mobx-react';\r\n\r\nimport {\r\n    Fab,\r\n    withStyles,\r\n    LinearProgress,\r\n    Container,\r\n    Card,\r\n    CardHeader,\r\n    CardContent,\r\n    Typography,\r\n    createMuiTheme,\r\n    MuiThemeProvider\r\n} from '@material-ui/core';\r\nimport { Done, Close } from '@material-ui/icons';\r\nimport { green, red } from '@material-ui/core/colors';\r\n\r\nimport { QuestionStore } from '../stores';\r\n\r\nconst buttonsTheme = createMuiTheme({\r\n    palette: {\r\n        primary: green,\r\n        secondary: red\r\n    }\r\n});\r\n\r\nconst styles = theme => ({\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    fab: {\r\n        selected: {\r\n            color: \"green\"\r\n        },\r\n    },\r\n    extendedIcon: {\r\n        marginRight: theme.spacing(2)\r\n    },\r\n    card: {\r\n        marginTop: theme.spacing(2)\r\n    }\r\n});\r\n\r\n@inject(i => ({ viewStore: new QuestionStore() }))\r\n@observer\r\nclass Question extends React.Component {\r\n    componentDidMount() {\r\n        const { step, viewStore, userId } = this.props;\r\n\r\n        viewStore.init(step, userId);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const { step, viewStore, userId } = this.props;\r\n\r\n        // re-init only on new step\r\n        if (prevProps.step !== step) {\r\n            viewStore.dispose();\r\n            viewStore.init(step, userId);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.viewStore.dispose();\r\n    }\r\n\r\n    render() {\r\n        const { classes, viewStore, userId } = this.props\r\n        const { question, questionState, castVote, answer, votesCount } = viewStore;\r\n\r\n        let innerComponent;\r\n        if (questionState < 1) {\r\n            innerComponent = (\r\n                <div>\r\n                    Loading...\r\n                </div>\r\n            );\r\n        }\r\n        else if (questionState > 1) {\r\n            innerComponent = (\r\n                <div>\r\n                    The end.\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            // const totalVotes = question.yes + question.no;\r\n            const yesPercentage = ((votesCount.yes / votesCount.total) * 100) || 0;\r\n            const noPercentage = ((votesCount.no / votesCount.total) * 100) || 0;\r\n\r\n            innerComponent = (\r\n                <Container>\r\n                    <h3>{question.question}</h3>\r\n                    <MuiThemeProvider theme={buttonsTheme}>\r\n                        <Fab\r\n                            variant=\"extended\"\r\n                            size=\"large\"\r\n                            color=\"primary\"\r\n                            aria-label=\"Yes\"\r\n                            className={classes.margin}\r\n                            disabled={answer === 'no'}\r\n                            onClick={e => castVote('yes', userId)}\r\n                        >\r\n                            <Done className={classes.extendedIcon} /> Yes\r\n                        </Fab>\r\n                        <Fab\r\n                            variant=\"extended\"\r\n                            size=\"large\"\r\n                            color=\"secondary\"\r\n                            aria-label=\"Yes\"\r\n                            className={classes.margin}\r\n                            disabled={answer === 'yes'}\r\n                            onClick={e => castVote('no', userId)}\r\n                        >\r\n                            <Close className={classes.extendedIcon} /> No\r\n                    </Fab>\r\n                        <div>\r\n                            <Card className={classes.card}>\r\n                                <CardHeader title=\"Results\"></CardHeader>\r\n                                <CardContent>\r\n                                    <Typography>\r\n                                        Yes ({yesPercentage.toFixed(0)} %)\r\n                                </Typography>\r\n                                    <LinearProgress color=\"primary\" variant=\"determinate\" value={yesPercentage} />\r\n                                    <Typography>\r\n                                        No ({noPercentage.toFixed(0)} %)\r\n                                </Typography>\r\n                                    <LinearProgress color=\"secondary\" variant=\"determinate\" value={noPercentage} />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </div>\r\n                    </MuiThemeProvider>\r\n                </Container>\r\n            );\r\n        }\r\n\r\n        return innerComponent;\r\n    }\r\n}\r\n\r\nQuestion.propTypes = {\r\n    step: PropTypes.number.isRequired,\r\n    userId: PropTypes.string.isRequired\r\n}\r\n\r\nexport default withStyles(styles)(Question);","import React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport { Question } from '../common/components';\r\n\r\n@inject(i => {\r\n    const viewStore = i.rootStore.questionsStore;\r\n    return {\r\n        viewStore: viewStore\r\n    }\r\n})\r\n@observer\r\nclass QuestionsPage extends React.Component {\r\n    async componentDidMount() {\r\n        await this.props.viewStore.init();\r\n    }\r\n    render() {\r\n        const { step, isAuthenticated, userId } = this.props.viewStore;\r\n\r\n        if (!isAuthenticated) {\r\n            return (\r\n                <div>\r\n                    <CircularProgress />\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <Question step={step} userId={userId} />\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuestionsPage;","import React from 'react';\r\nimport { observer, inject } from 'mobx-react';\r\nimport {\r\n    Container,\r\n    Typography,\r\n    Card,\r\n    CardHeader,\r\n    CardContent,\r\n    CardActions,\r\n    Button,\r\n    TextField,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    withStyles\r\n} from '@material-ui/core';\r\nimport { ArrowBack, ArrowForward, Visibility } from '@material-ui/icons';\r\n\r\nimport { AdminStore } from '../common/stores';\r\n\r\nconst styles = theme => ({\r\n    card: {\r\n        marginTop: theme.spacing(2)\r\n    }\r\n});\r\n\r\n@inject(i => {\r\n    const viewStore = new AdminStore();\r\n\r\n    return {\r\n        viewStore\r\n    };\r\n})\r\n@observer\r\nclass AdminPage extends React.Component {\r\n    async componentDidMount() {\r\n        await this.props.viewStore.init();\r\n    }\r\n    render() {\r\n        const { viewStore, classes } = this.props;\r\n        const { step, displayStep, next, previous, questions, form, updateField, submit } = viewStore;\r\n        return (\r\n            <Container>\r\n                <Card className={classes.card}>\r\n                    <CardContent>\r\n                        <Typography variant=\"h5\" component=\"h3\">\r\n                            Admin page\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Card>\r\n                <Card className={classes.card}>\r\n                    <CardHeader title=\"Questions management\" subheader=\"Use this to change question\" />\r\n                    {/* <CardContent>\r\n                        {question &&\r\n                            <Typography variant=\"body2\" component=\"p\">\r\n                                {displayStep}. {question.question}\r\n                            </Typography>\r\n                        }\r\n                    </CardContent> */}\r\n                    <CardActions>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"default\"\r\n                            startIcon={<ArrowBack />}\r\n                            disabled={step < 1}\r\n                            onClick={e => previous()}\r\n                        >\r\n                            Previous question\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"default\"\r\n                            endIcon={<ArrowForward />}\r\n                            onClick={e => next()}\r\n                        >\r\n                            Next question\r\n                        </Button>\r\n                    </CardActions>\r\n                </Card>\r\n                <Card className={classes.card}>\r\n                    <CardHeader title=\"List of questions\" />\r\n                    <CardContent>\r\n                        <List>\r\n                            {questions.map((q, idx) => {\r\n                                // <Typography variant=\"body2\" component=\"p\">{q.sortOrder + 1}. {q.question}</Typography>\r\n                                return (\r\n                                    <ListItem key={idx}>\r\n                                        {q.sortOrder === step && <ListItemIcon>\r\n                                            <Visibility />\r\n                                        </ListItemIcon>}\r\n                                        <ListItemText primary={q.question} secondary={\"Sort order: \" + q.sortOrder} />\r\n                                    </ListItem>\r\n                                )\r\n                            })}\r\n                        </List>\r\n                    </CardContent>\r\n                </Card>\r\n                <Card className={classes.card}>\r\n                    <CardHeader title=\"Add new question\" />\r\n                    <CardContent>\r\n                        <form onSubmit={submit} noValidate autoComplete=\"off\">\r\n                            <div>\r\n                                <TextField\r\n                                    required\r\n                                    name=\"question\"\r\n                                    label=\"Question\"\r\n                                    margin=\"normal\"\r\n                                    value={form.question}\r\n                                    onChange={updateField}\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <TextField\r\n                                    required\r\n                                    type=\"number\"\r\n                                    name=\"sortOrder\"\r\n                                    label=\"Sort order\"\r\n                                    margin=\"normal\"\r\n                                    value={form.sortOrder}\r\n                                    onChange={updateField}\r\n                                    inputProps={{\r\n                                        min: 1\r\n                                    }}\r\n                                />\r\n                                <Button type=\"submit\">Add question</Button>\r\n                            </div>\r\n                        </form>\r\n                    </CardContent>\r\n                </Card>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(AdminPage);","import React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { RouterView } from 'mobx-state-router';\n\nimport { AppBar, Toolbar, Typography, withStyles, Link, Container, Grid } from '@material-ui/core';\n\nimport { appStyles } from './App.styles';\n\nimport { WelcomePage, QuestionsPage, AdminPage } from './pages';\n\nconst viewMap = {\n  home: <WelcomePage />,\n  questions: <QuestionsPage />,\n  admin: <AdminPage />\n};\n\n@inject(i => ({\n  routerStore: i.rootStore.routerStore\n}))\n@observer\nclass App extends React.Component {\n  render() {\n    const classes = this.props.classes;\n\n    return (\n      <div className={classes.root}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography variant=\"h6\" className={classes.title}>\n              <Link style={{ fontFamily: 'Monoton', fontSize: '30px', textShadow: \"2px 2px #ccc\", textDecoration: 'none' }} href=\"/\" color=\"inherit\">Voter</Link>\n            </Typography>\n            <Link href=\"/questions\" color=\"inherit\">Quiz</Link>\n          </Toolbar>\n        </AppBar>\n        <Container fixed>\n          <Grid\n            container\n            justify=\"center\"\n            alignContent=\"center\"\n          >\n            <RouterView routerStore={this.props.routerStore} viewMap={viewMap} />\n          </Grid>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(appStyles)(App);","export const appStyles = theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    }\r\n});","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createBrowserHistory } from 'history';\r\n\r\nexport const history = createBrowserHistory();","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'mobx-react';\nimport { HistoryAdapter } from 'mobx-state-router';\n\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core';\n\nimport { RootStore } from './common/stores';\nimport { history } from './common/router/history';\n\nconst rootStore = new RootStore();\nconst historyAdapter = new HistoryAdapter(rootStore.routerStore, history)\nhistoryAdapter.observeRouterStateChanges();\n\nconst theme = createMuiTheme({\n    fontFamily: 'Roboto, sans-serif',\n    palette: {\n        primary: {\n            main: '#DC3912',\n        },\n        secondary: {\n            main: '#FF9900'\n        },\n    }\n});\n\nReactDOM.render(\n    <MuiThemeProvider theme={theme}>\n        <Provider rootStore={rootStore}>\n            <App />\n        </Provider>\n    </MuiThemeProvider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}